<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0) on Thu Dec 15 12:16:37 MST 2011 -->
<title>TestParser</title>
<meta name="date" content="2011-12-15">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="TestParser";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/TestParser.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/ai/test/TestLexer.html" title="class in com.ai.test"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../com/ai/test/TestVM.html" title="class in com.ai.test"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/ai/test/TestParser.html" target="_top">Frames</a></li>
<li><a href="TestParser.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">com.ai.test</div>
<h2 title="Class TestParser" class="title">Class TestParser</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>com.ai.test.TestParser</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">TestParser</span>
extends java.lang.Object</pre>
<div class="block"><p>Each test runs its own script inside {data/NanoScripts/testScripts/*.txt}</p>
 <p>Most of the tests are designed to perform actions to a set of variables and then test the outcome</p>
 <p>The general process is:</p>
 <p> parse the file..</p>
 <p> execute the result</p>
 <p> test all variables created by execution vs. expected results.</p>
 
 
 <p><b>AS OF M2, MOST TESTS ARE WAITING FOR THE EXECUTE() METHODS TO BE COMPLETED</b></p></div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>Martin Tice</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../com/ai/test/TestParser.html#TestParser()">TestParser</a></strong>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#setUp()">setUp</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testBooleanAssignment()">testBooleanAssignment</a></strong>()</code>
<div class="block">Tests boolean Assignments to "internally" created variables.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testCreatureDef()">testCreatureDef</a></strong>()</code>
<div class="block">Tests the parsing of the <code>CreatureDef</code>non-terminal</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testCrocWarrior()">testCrocWarrior</a></strong>()</code>
<div class="block">tests the crocWarrior script</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testException()">testException</a></strong>()</code>
<div class="block">tests if exceptions are thrown correctly</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#TestExternalAccess()">TestExternalAccess</a></strong>()</code>
<div class="block">Tests the correct recognition and retrevial of external gamestate variables.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testFireDragon()">testFireDragon</a></strong>()</code>
<div class="block">tests the FireDragon</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testifs()">testifs</a></strong>()</code>
<div class="block">series of if statements, increasingly more complicated, changing values of numbers from 1 to
  3..</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testIfWhileTestScript()">testIfWhileTestScript</a></strong>()</code>
<div class="block">Tests the ifWhileTestScripts.txt for correct evaluation and parsing of if and while statements.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testInternalAssignment()">testInternalAssignment</a></strong>()</code>
<div class="block">tests for correct recognition and assignment of internal identifiers.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testInternalEquality()">testInternalEquality</a></strong>()</code>
<div class="block">Tests equality of "internally" created variables.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testMushroomMan()">testMushroomMan</a></strong>()</code>
<div class="block">Tests the MushroomMan script</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testRelational()">testRelational</a></strong>()</code>
<div class="block">Tests parserRelationalTests.txt for correct evaluation and parsing of relational statements.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/ai/test/TestParser.html#testWhileScript()">testWhileScript</a></strong>()</code>
<div class="block">Similar to <a href="../../../com/ai/test/TestParser.html#testifs()"><code>testifs()</code></a>, Sets variables initially to 1.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="TestParser()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>TestParser</h4>
<pre>public&nbsp;TestParser()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setUp()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUp</h4>
<pre>public&nbsp;void&nbsp;setUp()
           throws java.lang.Exception</pre>
<dl><dt><span class="strong">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd></dl>
</li>
</ul>
<a name="testBooleanAssignment()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testBooleanAssignment</h4>
<pre>public&nbsp;void&nbsp;testBooleanAssignment()</pre>
<div class="block"><p>Tests boolean Assignments to "internally" created variables.</p> 
 <p>These are variables of type boolean created during parsing of a nanoC script.</p>
 <p>Tested by creating variables:
 <p>First by straight assignment:</p>
 <p>       a = true;b = false;</p>
 <p>Then by previously stored</p>
 <p>       a = b;...</p>
 <p>Then by various comparisons operators and combinations of the above two:</p>
 <p> a = true && true; c = a || b; ...</p>
 <p></p>
 <p>Script for this test is "data/NanoScrips/testScripts/boolAss.txt"</p></div>
</li>
</ul>
<a name="testInternalEquality()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testInternalEquality</h4>
<pre>public&nbsp;void&nbsp;testInternalEquality()</pre>
<div class="block"><p>Tests equality of "internally" created variables.</p> 
 <p>These are variables of type number created during parsing of a nanoC script.</p>
 <p>Tested by creating variables:
 <p>First by straight assignment:</p>
 <p>       a = 5;b = 4;</p>
 <p>Then by previously stored</p>
 <p>       a == b; a != b;...</p>
 <p>Then by various combinations of the above two:</p>
 <p> a != b-3; c == a+b;...</p>
 <p></p>
 <p>Script for this test is "data/NanoScrips/testScripts/boolAss.txt"</p></div>
</li>
</ul>
<a name="testCreatureDef()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCreatureDef</h4>
<pre>public&nbsp;void&nbsp;testCreatureDef()</pre>
<div class="block">Tests the parsing of the <code>CreatureDef</code>non-terminal</div>
</li>
</ul>
<a name="testifs()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testifs</h4>
<pre>public&nbsp;void&nbsp;testifs()</pre>
<div class="block">series of if statements, increasingly more complicated, changing values of numbers from 1 to
  3.. if test passes, all numbers should be 3.</div>
</li>
</ul>
<a name="testWhileScript()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhileScript</h4>
<pre>public&nbsp;void&nbsp;testWhileScript()</pre>
<div class="block">Similar to <a href="../../../com/ai/test/TestParser.html#testifs()"><code>testifs()</code></a>, Sets variables initially to 1. Runs a series of embedded while statements.
 
 at end, all variables should equal 10.</div>
</li>
</ul>
<a name="testIfWhileTestScript()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testIfWhileTestScript</h4>
<pre>public&nbsp;void&nbsp;testIfWhileTestScript()</pre>
<div class="block">Tests the ifWhileTestScripts.txt for correct evaluation and parsing of if and while statements.</div>
</li>
</ul>
<a name="testRelational()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testRelational</h4>
<pre>public&nbsp;void&nbsp;testRelational()</pre>
<div class="block">Tests parserRelationalTests.txt for correct evaluation and parsing of relational statements.</div>
</li>
</ul>
<a name="testInternalAssignment()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testInternalAssignment</h4>
<pre>public&nbsp;void&nbsp;testInternalAssignment()</pre>
<div class="block">tests for correct recognition and assignment of internal identifiers.</div>
</li>
</ul>
<a name="TestExternalAccess()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>TestExternalAccess</h4>
<pre>public&nbsp;void&nbsp;TestExternalAccess()</pre>
<div class="block">Tests the correct recognition and retrevial of external gamestate variables.
 Uses script parserExternalAccessText.txt</div>
</li>
</ul>
<a name="testFireDragon()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFireDragon</h4>
<pre>public&nbsp;void&nbsp;testFireDragon()</pre>
<div class="block">tests the FireDragon</div>
</li>
</ul>
<a name="testCrocWarrior()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCrocWarrior</h4>
<pre>public&nbsp;void&nbsp;testCrocWarrior()</pre>
<div class="block">tests the crocWarrior script</div>
</li>
</ul>
<a name="testMushroomMan()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testMushroomMan</h4>
<pre>public&nbsp;void&nbsp;testMushroomMan()</pre>
<div class="block">Tests the MushroomMan script</div>
</li>
</ul>
<a name="testException()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testException</h4>
<pre>public&nbsp;void&nbsp;testException()
                   throws <a href="../../../com/ai/reference/ExecutionException.html" title="class in com.ai.reference">ExecutionException</a></pre>
<div class="block">tests if exceptions are thrown correctly</div>
<dl><dt><span class="strong">Throws:</span></dt>
<dd><code><a href="../../../com/ai/reference/ExecutionException.html" title="class in com.ai.reference">ExecutionException</a></code></dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/TestParser.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/ai/test/TestLexer.html" title="class in com.ai.test"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../com/ai/test/TestVM.html" title="class in com.ai.test"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/ai/test/TestParser.html" target="_top">Frames</a></li>
<li><a href="TestParser.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
