Initial Design
This is the initial design that was submitted with MS1.

Server
The server for JWorld waits for clients to connect, and then hands off the responsibility of managing them to handlers.  The server will run on it's own thread.


ClientHandler
The ClientHandler contains two Sockets, one for receiving, and one for sending.  It runs on it's own thread, and perpetually "listens" for input from its Client.  It is responsible for handling input from the Client, and sending data from the Server to the Client.
  

Client
The Client contains two Sockets, one for receiving, and one for sending.  It runs on it's own thread, and perpetually "listens" for input from it's ClientHandler.  It is responsible for handling input from it's ClientHandler, input from the User, and sending data to it's ClientHandler.  Client shall be an Interface implemented by different concrete Clients (DebugClient, StandardClient, etc.).


Scheduler
The scheduler contains a Timer, and a PriorityBlockingQueue.  It is responsible for executing scheduled commands every ts milliseconds.  The queue orders it's commands by their prep time.  When a Command is added, it's prepTime will be incremented by the current time, in order to "normalize" it to the rest of the commands.  So let us suppose that the current time is 1000, and a MoveUp command is sent with a prepTime of 1.  The commands prepTime will be incremented to 1001, and then added to the Queue.  So when time 1001 comes around, the MoveUp command (and all commands with that time) will be pulled off the Queue and executed sequentially.  This process is superceded by commands with 0 preptime.  Such commands are executed IMMEDIATELY without being added to the Queue (such commands will be extremely rare).  Commands are responsible for synchronizing on the specific part of the game state they access.


Communications Protocol
To minimize network traffic, Objects will be sent rarely.  Most communication will be integers.  This will be facilitated through a Commandler(CommandHandler) enum.  Every Command type will be added to the enum, and it's .ordinal() will be sent across the network.  The actual Command object will be instantiated on the server side, given reference to the game state and the sending player, and sent to the scheduler.  If a command requires an object, then that will be handled by a special handler method.
Suppose that Client A wishes to send a message to all other connected Clients.  A will send the Commandler.MESSAGEINC.ordinal() integer to it's ClientHandler, which will begin to wait for a String to be sent.  A will then send the message and the ClientHandler will instantiate a new MessageCommand() with the gamestate, the Player tied to the ClientHandler, and the message, and then schedule it.


Testing Strategy
Server/Client interactions are difficult to test through JUnit, so JMock will be used.  Testing will also be performed by a Tester using a DebugClient, and a script of actions to perform, the Tester will record any bugs or enhancements he feels need to be made, and then route them to the Dev responsible for that section.


Threading Issues
On the Server side, there are several groups of threads.  There is the Server thread, the Scheduler thread, and all the Handler threads.  The game state is simply a data structure holding various aspects of the game (players, monsters, etc).  The handlers only interact with the game state directly during player creation, so the register player method will synchronize on the registered players structure.  After Player creation, the handlers all interact with the Scheduler only.  So issues could arise with adding commands, and commands with 0 preptime (immediate execution without scheduling).  The issues with adding are taken care of by the specific implementation of Queue, the PriorityBlockingQueue, which blocks it's methods.  The issues with immediate execution are handled inside the commands themselves.  All commands have a reference to the game state, and will synchronize on whatever they access.  For example, the MoveUp command affects a player, and a tile.  So it will synchronize on the list of characters, since we don't want them to be able to change their locations.



Main Process
Here I will describe the sequence of events from a player connecting to the game, to him being able to perform actions, to him disconnecting.

We will assume for this example, that the server is running.

Player will start the application, and be prompted for an IP address (optionally, a port as well).  The Client will connect to the server (specified by this address) and a new ClientHandler will be instantiated with an input Socket, an output Socket, and a reference to the game state.  This ClientHandlers run method will then begin executing on a separate thread, while the server resumes listening for Clients.  The ClientHandler will send a name request command to the Client, which will open an option box to allow the Player to enter a name, a gender, and a class.  This information will then be sent to the ClientHandler, which will check to see if a Player with that name exists in he game already.  If such a player does exist, the ClientHandler will request another name from the Client.  If such a player does NOT exist, then the ClientHandler will check a directory to see if such a player has a file.  If it has, then the ClientHandler will read in the Player data from the file add it to the gamestate, and signal the client that his name has been registered.  An update will then be sent to the Client, telling it where the player is, what the player can see, and what the player has on him.  The player may then begin playing the game.  If the player does not have a file (i.e. a player with the specified name has never been registered), then the Player will be registered, and the update package will be sent, at which time the Player will be able to play the game.

During game play, the Players commands will be sent through the Client to the server.  For example, let us examine a Move Command.  Let us assume that the player moves up.  First, the integer value for the MoveUp command will be serialized from the Client to it's Handler.  The Handler will instantiate a new MoveUp() command, that takes the game state, and the sending Player as parameters.  This command will be sent to the Scheduler.  The scheduler will normalize the commands prep time, and add it to the queue.  When the appropriate time step has been reached, the scheduler will remove all commands to be executed and execute them.  The scheduler will then notify all the ClientHandlers that an update has happened, and they should decide what to send their Clients.

On disconnect, the player will be unregistered from the game, and a players data will be saved to a file with his name.  If such a file already exists, it will be overwritten.




The following is the final design of the TrollQuest Networking Package.



Final Design
The final design for TrollQuests communication/execution layer uses two threads and two sockets 
per Server/Client Worker pair, and a single thread for the execution loop.  All communication 
between client and server is accomplished through various ComparableCommands.  These commands
encapsulate any data they need (excluding the game state) to execute.  This system uses 
the producer/consumer pattern.  The Listeners consume, the Senders produce.


Server
The server is responsible for connecting clients to the game, and providing them with ServerWorkers.
It uses two ServerSockets bound to ports p and p+1, to connect ClientWorkers.  The Server
waits for clients to connect one socket, on port p, and then begins waiting for that same client
to connect another socket on port p+1.  This guarantees that no Client can end up with only 
one socket connected.  After successfully connecting the two sockets, the server creates a new
ServerListener and ServerSender on their own threads, and begins waiting for new client 
connections. The Server uses a CachedThreadPool to provide thread services.  This pool dynamically
expands when it has to, and contracts when threads are no longer being used.  In this fashion,
the server uses 2n+2 (O(n)) threads where n is the number of currently connected clients.      


ServerSender
The ServerSender is part of the ServerWorker, it is responsible for sending Commands from the Server
to the connected Client.  This is accomplished through a BlockingQueue, and an ObjectOutputStream.
Other Threads (the GameScheduler thread) may add commands to the BlockingQueue.  These commands are
sent in the order they are received.  Using an ObjectOutputStream, the ServerSender takes commands
from the BlockingQueue and sends them to the connected ClientListener.  If there are no commands to
be sent, the thread will halt until there are.  This is accomplished through the BlockingQueue's
take method.  This method blocks until there is something to take.  By separating the sending
functionality into a thread, if there's a hiccup in the socket connection, the execution thread
will not be halted while trying to send commands.


ServerListener
The ServerListener is the second part of the ServerWorker.  It is responsible for receiving commands
from the connected ClientSender, and scheduling those commands to be executed.  This is accomplished
through an ObjectInputStream.  The ServerListener uses the readObject method of the ObjectInputStream
to wait for Commands from the connected ClientSender.  When a Command is read, it is tagged with the
identity of the sender and scheduled for execution.  The ServerListener then resumes waiting for 
Commands.


ClientSender
The ClientSender is almost exactly the same as the ServerSender with one difference.  It maintains
a Set of the Commands that it has sent.  The client is not permitted to send commands of the same type
of until the last command of that type is returned from the server.  So let's say the user sends a 
MoveCommand.  This MoveCommand will be added to the Set of commands that have been sent after it is
transmitted.  The user then sends another MoveCommand, before the first MoveCommand comes back.  The
sender will check to see if the first MoveCommand has come back, and after seeing that it hasn't, the
sender discards that Command.  When the ClientListener receives the first MoveCommand back from the
server, it will be removed from the set, and new MoveCommands may be sent.  


ClientListener
The ClientListener is once again, almost the same as it's Server counterpart, but it does have one
difference.  While the ServerListener passes off received commands to the GameScheduler, the Client
Listener executes them as they are received, and then notifies the GUI with that command. On the
Server side, commands need to be scheduled so that they can be executed at the appropriate 
times, but on the Client side, commands that are received are received in the correct order for 
execution (the order they were executed in on the Server).


ComparableCommand
The ComparableCommand encapsulates all actions that can be performed.  It contains all the data that
it needs to perform some action on the game state, except the game state it self.  The main methods
of the ComparableCommand are setState, isValid, and execute.  setState gives access to the local game
state, isValid checks to see if the commands conditions are met, and execute performs the commands
action.  SetState is called twice, once on the server side when it's scheduled, and once on the client
side before the command is executed.  isValid is called once on the ServerSide.  When a command is
removed from the schedule, it is checked to ensure that it's conditions are still met, and then it
is executed if they are.  


GameScheduler
The GameScheduler contains the General schedule that the AI uses to schedule commands on, and where
respawn commands are scheduled, and it contains the methods for performing one iteration of the game.
It is responsible for executing and distributing User and AI commands.  The GameScheduler runs on a
a Timer (java.util not java.swing) thread that executes once every millisecond.  The details of the
execution method follows.  First, the loop checks to see if the games end conditions are met.  If
any of the conditions are met, a GameOverCommand is broadcast, and the Server is shutdown, otherwise
the loop continues to AI execution.  Scriptable GameCharacters that do not have commands scheduled
are eligible to schedule a new Command every 500 milliseconds.  It was decided that having Monsters
executing commands whenever they were eligible to made the game too difficult, and so we added a delay.
After the AI has a chance to schedule commands, the loop executes user commands.  It checks every 
users schedule and executes any commands that are eligible.  Then it executes all commands on the 
General Schedule.  Execution is the same for users and ai.  First a command is checked for
validity.  If it's valid, it is executed, any command it returns is scheduled, then it is marked as
successful and broadcast to all connected Clients.  If it is not valid, it is marked as unsuccessful
and returned to the user who sent it (unless it's an ai command in which case nothing happens). 


State
The State is responsible for storing all data about the game.  All the Characters, all the Maps, and
on the server side, information about all connected users.  It is in effect a large datastructure.  
On connection, a Client receives the current State.


Profile
The Profile is responsible for storing information about a user.  It contains all the characters he's
created which may be reused.  These characters maintain all stats/abilities/items that they had when
saved.  When a user disconnects (on purpose or otherwise), his character and profile are saved to a
file.  When he reconnects, his Profile will be loaded, and he will have the option to create a 
new character, or reuse an old one.


Testing Strategy
Testing of client/server interactions is accomplished primarily by playing the game.  An open beta was 
held the week before rollout and users were encouraged to submit bugs that they found while playing. 





Differences between initial and final design

Serialization of Command objects instead of construction on the server side:
During our first meeting with Professor Lane, he pointed out that we should "Design for designer sanity."  
While my original plan could probably have been made to work, it was too complicated and unwieldy for
the job required.  

Dual Threaded Client/Server Workers
During the second presentation for MS2, Professor Lane brought up another issue, what would happen if
the Socket got stuck somehow, and then the GUI thread (on the client side) or the execution thread 
became blocked until the Socket could send again.  To solve this, I decoupled the sending from
the thread that wanted to do the send, and instead made it's own.  That way, the GUI and execution 
threads would not get stuck.

One schedule per user + a General Schedule
Shortly before MS3, we realized that we had to clear the schedule of a Player's commands when that
player died.  Because iterating over all the scheduled commands would have taken a long time, I
decided to give each User it's own schedule.  That way it would be easy to clear their Queue upon
death.

Removal of Immediate Execution option
Originally I had proposed that some commands not go through the scheduling system, and instead be
executed immediately by the ServerListener.  To remove the potential for thread contention, I
removed this and instead scheduled every command (except for the Single Step command which can
only be executed when the game thread is not running).

Removal of JMock testing
I simply did not have time to learn this system, so I was forced to use more simplistic means
of testing.  Manual Testing.  Blech.  However, I think the open beta was fairly successful, 
and found issues that we ourselves probably wouldn't have.















