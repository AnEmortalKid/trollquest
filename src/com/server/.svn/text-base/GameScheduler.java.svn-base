/**
 * @author Stephen Patel (spatel11@unm.edu)
 */
package com.server;

import java.util.HashSet;
import java.util.Set;
import java.util.TimerTask;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

import com.ai.VM;
import com.client.Graphics.AnimationsOfACharacter.ActionType;
import com.game.characters.GameCharacter;
import com.game.characters.Monster;
import com.game.characters.Player;
import com.game.characters.Scriptable;
import com.game.characters.Creature.Stat;
import com.server.command.CommandChangeState;
import com.server.command.ComparableCommand;
import com.server.command.GameOverCommand;
import com.server.command.RecoverCreaturesCommand;
import com.server.factory.Traces;
import com.server.interfaces.Listener;
import com.server.interfaces.Sender;
import com.server.interfaces.Server;
import com.server.interfaces.Trace;

/**
 * The GameScheduler is reponsible for executing {@link ComparableCommand}s from
 * clients, and distributing those commands to other clients. The scheduler is
 * meant to run on a {@link java.util.Timer}. As such, GameScheduler extends
 * {@link TimerTask}.
 * 
 * @author Stephen Patel
 * 
 */
public class GameScheduler extends TimerTask {

	/**
	 * The current time.
	 */
	private int currentTime;
	/**
	 * The {@link State} that the {@link ComparableCommand}s from the clients
	 * are executed with.
	 */
	private State state;
	/**
	 * The {@link PriorityBlockingQueue} responsible for ordering the
	 * {@link ComparableCommand}s.
	 */
	private final BlockingQueue<ComparableCommand> schedule;
	/**
	 * Trace to log messages.
	 */
	private final Trace log;
	/**
	 * VirtualMachine for monster actions.
	 */
	private final VM vm;
	/**
	 * The number of ticks between recovery commands.
	 */
	private final int recover;
	/**
	 * The Set of monsters who are currently executing non ChangeState Commands.
	 */
	private final Set<String> executing;

	/**
	 * Constructs a {@link GameScheduler} with a reference to the input
	 * {@link State} and {@link Server}.
	 * 
	 * @param s
	 *            the State you want {@link ComparableCommand}s to reference.
	 */
	public GameScheduler(State s) {
		this.schedule = new PriorityBlockingQueue<ComparableCommand>();
		this.currentTime = 0;
		this.state = s;
		this.log = Traces.standardTrace("GameScheduler");
		this.vm = new VM();
		this.recover = 10000;
		this.executing = new HashSet<String>();
	}

	/**
	 * This should be used only for AI Commands. Schedules a
	 * {@link ComparableCommand} for execution. If the command is null, this
	 * method silently returns. Otherwise the command has it's {@link State}
	 * set, prepTime updated, and is added to the schedule.
	 * 
	 * @param com
	 *            the command to schedule.
	 */
	public void schedule(ComparableCommand com) {
		// if the command is null, return silently.
		if (com == null)
			return;
		// If this command is not a changestate command
		if (!(com instanceof CommandChangeState))
			// then add it's monster to the executing set.
			executing.add(com.getCharName());
		// otherwise, give it access to the state
		com.setState(state);
		// update it's preptime to the current gametime
		com.updateTime(currentTime);
		// Debug: print that the command is being scheduled.
		log.infoMessage("Scheduling " + com.toString() + " with time "
				+ com.getPrepTime() + " at time " + currentTime);
		try {
			// Schedule the command. Blocks if necessary.
			schedule.put(com);
		} catch (InterruptedException e) {
			log.exceptionMessage(e);
		}
	}

	/**
	 * Send's a {@link ComparableCommand} to the list of clients.
	 * 
	 * @param com
	 *            the command to send.
	 */
	private void distributeCommand(ComparableCommand com) {
		// For each listener that is registered
		for (Listener l : state.getClients()) {
			// if it is connected still
			if (l.isConnected())
				// Send the command.
				l.getSender().addToCommandQueue(com);
		}

	}

	/**
	 * Increments the current time, and performs one iteration of the game loop.
	 */
	@Override
	public void run() {
		currentTime++;
		gameIteration(currentTime);
	}

	/**
	 * Executes every command that is eligible to be executed in the input
	 * {@link BlockingQueue}. If a command is valid, then it is executed and
	 * broadcast to all the other clients. If it is not valid, then it is
	 * returned to it's Sender (unless it's an AI command in which case nothing
	 * happens).
	 * 
	 * @param time
	 *            the current time, all commands in the input queue that have a
	 *            preptime less than the current time will be executed.
	 * @param coms
	 *            the queue of commands you wish to execute commands from.
	 */
	private void executeCommands(int time, BlockingQueue<ComparableCommand> coms) {
		if (coms == null)
			return;
		while (!coms.isEmpty() && coms.peek().getPrepTime() < time) {
			ComparableCommand com = coms.remove();
			// If this command is a changestate command
			if (!(com instanceof CommandChangeState))
				// then remove it's owner from the executing set.
				executing.remove(com.getCharName());
			log.infoMessage("Removing " + com.toString() + " from queue.");
			if (com.isValid()) {
				log.infoMessage("Executing: " + com.toString());
				ComparableCommand retCom = com.execute();
				if (retCom != null) {
					retCom.setUserName(com.getUserName());
					if (retCom.getUserName() != null) {
						log.errMessage(retCom.getUserName() + ": " + retCom);
						state.schedule(retCom);
					} else {
						log.errMessage("Monster: " + retCom);
						schedule(retCom);
					}
				}
				com.setSuccess(true);
				distributeCommand(com);
			} else {
				log.infoMessage(com.toString() + " is not valid!");
				com.setSuccess(false);
				if (com.getUserName() != null) {
					Listener l = state.getClient(com.getUserName());
					Sender s = l.getSender();
					if (s == null)
						continue;
					s.addToCommandQueue(com);
				} else {
					GameCharacter g = state.getCharacter(com.getCharName());
					if (g != null) {
						ComparableCommand c = new CommandChangeState(g.name,
								ActionType.STAND, g.getDirection(), 0.0, 0.0);
						c.setState(state);
						distributeCommand(c);
					}
				}
			}
		}
	}

	/**
	 * Performs one step of the game. Generates a
	 * {@link RecoverCreaturesCommand} every recover ticks. Allows monsters to
	 * execute every tickstillmon ticks. Executes commands from every client,
	 * and the ai schedule.
	 * 
	 * @param time
	 *            the time step.
	 */
	private void gameIteration(int time) {
		if (time % 1000 == 0 && gameOver(time)) {
			state.stopGameThread();
			distributeCommand(new GameOverCommand());
			System.exit(0);
		}
		if (time % recover == 0)
			schedule(new RecoverCreaturesCommand());
		if (time % 500 == 0)
			getMonsterMoves();
		for (Listener l : state.getClients()) {
			executeCommands(time, state.getSchedule(l.getUserName()));
		}
		executeCommands(time, schedule);
	}

	/**
	 * Get's a monster command for every monster in the world.
	 */
	private void getMonsterMoves() {
		// log.infoMessage("Getting Monster Moves");
		for (GameCharacter monster : state.getIntelligentCharacters()) {
			// If this monster does not have a command in the queue.
			if (!executing.contains(monster.name)) {
				vm.loadPCs(state, monster.getMap());
				vm.loadSelf(monster);
				if (vm.inRange()) {
					state.getAST().executeStrategy(
							((Scriptable) monster).getScript(), vm);
					ComparableCommand com = vm.getCommand();
					schedule(com);
				} else {
					if (monster.getActionState() != ActionType.DIE
							&& monster.getActionState() != ActionType.STAND)
						schedule(new CommandChangeState(monster.name,
								ActionType.STAND, monster.getDirection(), 0, 0));
				}
				vm.clearData();
			}
		}
	}

	private boolean gameOver(int time) {
		if (time < 0)
			return true;
		if (state.getPlayers().isEmpty() && time > 60000)
			return true;
		int questsRemaining = 0;
		for (Player p : state.getPlayers()) {
			if (!p.getPlayersQuest().isFinished())
				questsRemaining++;
		}
		if (questsRemaining == 0 && state.getPlayers().size() > 0)
			return true;
		if (state.getLivingPlayers().isEmpty() && state.getPlayers().size() > 1)
			return true;
		if (state.getLivingMonsters().isEmpty())
			return true;
		return false;
	}

	/**
	 * Get's the current game time.
	 * 
	 * @return the number of iterations that have occurred.
	 */
	public int getCurrentTime() {
		return currentTime;
	}
}
